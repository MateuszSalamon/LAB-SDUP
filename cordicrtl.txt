`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 03.04.2019 09:44:20
// Design Name: 
// Module Name: cordic_pipe_rtl
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module cordic_pipe_rtl( clock, reset, ce, angle_in, sin_out, cos_out, valid_out, x, y);
parameter a = 3;
parameter b = 7;
parameter integer W = 12; //Width of the fixed-point (12:10) representation
parameter FXP_MUL = 1024; //Scaling factor for fixed-point (12:10) representation
parameter PIPE_LATENCY = 15; // Input->output delay in clock cycles
genvar j;
input clock, reset, ce;
input [W-1:0] angle_in; //Angle in radians
output [W-1:0] sin_out, cos_out;
output [W-1:0] x, y; 
output valid_out; //Valid data output flag
//Cordic look-up table
reg signed [11:0] atan[0:10] = { 12'b001100100100, 12'b000111011011, 12'b000011111011, 12'b000001111111,
 12'b000001000000, 12'b000000100000, 12'b000000010000, 12'b000000001000,
12'b000000000100, 12'b000000000010, 12'b000000000001 };
//Tabs of wires for connections between the stage processors a2 - a13
wire signed [W-1:0] sin_tab [0:11];
wire signed [W-1:0] cos_tab [0:11];
wire signed [W-1:0] t_angle_tab [0:11]; //Target angle also must be pipelined
wire signed [W-1:0] angle_tab [0:11];

//
reg unsigned [4:0] valid_cnt; //Counts pipeline delay
//Synchroniuos activity: latency counter, angle_in latch
always@(posedge clock)
begin
 if ( reset == 1'b1 )
 valid_cnt <= PIPE_LATENCY; //Setup latency counter
 else
 if( ( valid_cnt != 0 ) && ( ce == 1'b1 ) )
 valid_cnt <= valid_cnt - 1; //Valid output data moves toward output
end
assign valid_out = ( valid_cnt == 0 )? 1'b1 : 1'b0; //Set valid_out when counter counts up to PIPE_LATENCY
//Stage a1: assign initial values (No registers - asynchronous !!!)
assign cos_tab[0] = 1.0 * FXP_MUL;
assign sin_tab[0] = 0;
assign angle_tab[0] = 0;
assign t_angle_tab[0] = angle_in;

////Stage a2 - 13 processor netlist
/* cordic_step #(0) cordic_step_0 ( clock, ce, sin_tab[0], cos_tab[0], angle_tab[0], t_angle_tab[0], atan[0],
 sin_tab[1], cos_tab[1], angle_tab[1], t_angle_tab[1] );
 cordic_step #(1) cordic_step_1 ( clock, ce, sin_tab[1], cos_tab[1], angle_tab[1], t_angle_tab[1], atan[1],
 sin_tab[2], cos_tab[2], angle_tab[2], t_angle_tab[2] );
 cordic_step #(2) cordic_step_2 ( clock, ce, sin_tab[2], cos_tab[2], angle_tab[2], t_angle_tab[2], atan[2],
 sin_tab[3], cos_tab[3], angle_tab[3], t_angle_tab[3] );
 cordic_step #(3) cordic_step_3 ( clock, ce, sin_tab[3], cos_tab[3], angle_tab[3], t_angle_tab[3], atan[3],
 sin_tab[4], cos_tab[4], angle_tab[4], t_angle_tab[4] );
 cordic_step #(4) cordic_step_4 ( clock, ce, sin_tab[4], cos_tab[4], angle_tab[4], t_angle_tab[4], atan[4],
 sin_tab[5], cos_tab[5], angle_tab[5], t_angle_tab[5] );
 cordic_step #(5) cordic_step_5 ( clock, ce, sin_tab[5], cos_tab[5], angle_tab[5], t_angle_tab[5], atan[5],
 sin_tab[6], cos_tab[6], angle_tab[6], t_angle_tab[6] );
 cordic_step #(6) cordic_step_6 ( clock, ce, sin_tab[6], cos_tab[6], angle_tab[6], t_angle_tab[6], atan[6],
 sin_tab[7], cos_tab[7], angle_tab[7], t_angle_tab[7] );
 cordic_step #(7) cordic_step_7 ( clock, ce, sin_tab[7], cos_tab[7], angle_tab[7], t_angle_tab[7], atan[7],
 sin_tab[8], cos_tab[8], angle_tab[8], t_angle_tab[8] );
 cordic_step #(8) cordic_step_8 ( clock, ce, sin_tab[8], cos_tab[8], angle_tab[8], t_angle_tab[8], atan[8],
 sin_tab[9], cos_tab[9], angle_tab[9], t_angle_tab[9] );
 cordic_step #(9) cordic_step_9 ( clock, ce, sin_tab[9], cos_tab[9], angle_tab[9], t_angle_tab[9], atan[9],
 sin_tab[10], cos_tab[10], angle_tab[10], t_angle_tab[10] );
 cordic_step #(10)cordic_step_10( clock, ce, sin_tab[10], cos_tab[10], angle_tab[10], t_angle_tab[10],
 atan[10], sin_tab[11], cos_tab[11], angle_tab[11], t_angle_tab[11] );
*/
generate for (j=0; j<11; j=j+1)
begin: loop1
 cordic_step #(j) cordic_step_j ( clock, ce, sin_tab[j], cos_tab[j], angle_tab[j], t_angle_tab[j], atan[j],
 sin_tab[j+1], cos_tab[j+1], angle_tab[j+1], t_angle_tab[j+1] );
 end
 endgenerate

//Stage a14 - 18: scaling of the results
 mul_Kn mul_Kn_sin ( clock, ce, sin_tab[11], sin_out);
 mul_Kn mul_Kn_cos ( clock, ce, cos_tab[11], cos_out);
 mul_Kn_param3 mul_Kn_x ( clock, ce, sin_tab[11], x);
 mul_Kn_param7 mul_Kn_y ( clock, ce, cos_tab[11], y);
    

endmodule


//////////////////////////////////////////////////////////////////////////////////
// Design Name: Pipeline cordic custom processor
// Module Name: cordic_step
// Define the cordic step in blocks a2 - a13
//////////////////////////////////////////////////////////////////////////////////
module cordic_step ( clock, ce, sin_in, cos_in, angle_in, t_angle, atan,
 sin_out, cos_out, angle_out, t_angle_out );
parameter integer step = 0; //Step number
parameter integer W = 12; //Width for fixed-point representation. Fixpoint(12:10)
input clock, ce;
input signed [W-1:0] sin_in, cos_in, angle_in, t_angle, atan;
output reg signed [W-1:0] sin_out, cos_out, angle_out, t_angle_out;
//
always @ (posedge clock)
begin
 if( ce == 1'b1 )
 begin
 if(t_angle > angle_in)
 begin
 cos_out <= cos_in - (sin_in >>> step); //Arithmetic shift !!!//???
 sin_out <= (cos_in >>> step) + sin_in;//???
 angle_out <= angle_in + atan;
 end
 else
 begin
 cos_out <= cos_in + (sin_in >>> step );//???
 sin_out <= -(cos_in >>> step) + sin_in;//???
 angle_out <= angle_in - atan;
 end
 t_angle_out <= t_angle;
 end //if ( ce == 1'b1 )
end
endmodule

module mul_Kn(clock, ce, value_in, value_out);
parameter integer W = 12; //Width of the fixed-point (12:10) representation
parameter FXP_SHIFT = 10; //Fraction for fixed-point (12:10) representation
input clock, ce;
input signed[W-1:0] value_in;
output reg signed[W-1:0] value_out;
reg signed [2*W-1:0] val, val_0, val_2, val_4, val_5, val_7, val_7_9_d, val_9; //Shifted input values
reg signed [2*W-1:0] val_0_2, val_4_5, val_7_9, val_0_2_4_5, val_0_2_4_5_7_9; //Accumulated values
//
always @ (posedge clock)
begin
if( ce == 1'b1 )
 begin
 //Step S4
 val = value_in; val_0 <= val; val_2 <= val << 2; val_4 <= val << 4;
 val_5 <= val << 5; val_7 <= val << 7; val_9 <= val << 9;
 //Step S5
 val_0_2 <= val_0 - val_2; val_4_5 <= val_4 - val_5; val_7_9 <= val_7 + val_9;//???
 //Step S6
 val_0_2_4_5 <= val_0_2 + val_4_5;
 val_7_9_d <= val_7_9; //delay val_7_9 which is necessary in the 4-th pipe stage
 //Step S7
 val_0_2_4_5_7_9 = val_0_2_4_5 + val_7_9_d;
 //Step S8
 value_out <= val_0_2_4_5_7_9 >>> FXP_SHIFT;
 end
end
endmodule

module mul_Kn_param3(clock, ce, value_in, value_out);
parameter a =3;
parameter integer W = 12; //Width of the fixed-point (12:10) representation
parameter FXP_SHIFT = 10; //Fraction for fixed-point (12:10) representation
input clock, ce;
input signed[W-1:0] value_in;
output reg signed[W-1:0] value_out;
reg signed [2*W-1:0] val, val_0, val_2, val_4, val_5, val_7, val_7_9_d, val_9; //Shifted input values
reg signed [2*W-1:0] val_0_2, val_4_5, val_7_9, val_0_2_4_5, val_0_2_4_5_7_9; //Accumulated values
//
always @ (posedge clock)
begin
if( ce == 1'b1 )
 begin
 //Step S4
 val = value_in; val_0 <= val; val_2 <= val << 2; val_4 <= val << 4;
 val_5 <= val << 5; val_7 <= val << 7; val_9 <= val << 9;
 //Step S5
 val_0_2 <= val_0 - val_2; val_4_5 <= val_4 - val_5; val_7_9 <= val_7 + val_9;//???
 //Step S6
 val_0_2_4_5 <= val_0_2 + val_4_5;
 val_7_9_d <= val_7_9; //delay val_7_9 which is necessary in the 4-th pipe stage
 //Step S7
 val_0_2_4_5_7_9 = val_0_2_4_5 + val_7_9_d;
 //Step S8
 value_out <= a * val_0_2_4_5_7_9 >>> FXP_SHIFT;
 end
end
endmodule

module mul_Kn_param7(clock, ce, value_in, value_out);
parameter b = 7;
parameter integer W = 12; //Width of the fixed-point (12:10) representation
parameter FXP_SHIFT = 10; //Fraction for fixed-point (12:10) representation
input clock, ce;
input signed[W-1:0] value_in;
output reg signed[W-1:0] value_out;
reg signed [2*W-1:0] val, val_0, val_2, val_4, val_5, val_7, val_7_9_d, val_9; //Shifted input values
reg signed [2*W-1:0] val_0_2, val_4_5, val_7_9, val_0_2_4_5, val_0_2_4_5_7_9; //Accumulated values
//
always @ (posedge clock)
begin
if( ce == 1'b1 )
 begin
 //Step S4
 val = value_in; val_0 <= val; val_2 <= val << 2; val_4 <= val << 4;
 val_5 <= val << 5; val_7 <= val << 7; val_9 <= val << 9;
 //Step S5
 val_0_2 <= val_0 - val_2; val_4_5 <= val_4 - val_5; val_7_9 <= val_7 + val_9;//???
 //Step S6
 val_0_2_4_5 <= val_0_2 + val_4_5;
 val_7_9_d <= val_7_9; //delay val_7_9 which is necessary in the 4-th pipe stage
 //Step S7
 val_0_2_4_5_7_9 = val_0_2_4_5 + val_7_9_d;
 //Step S8
 value_out <= b * val_0_2_4_5_7_9 >>> FXP_SHIFT;
 end
end
endmodule