`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 06.03.2019 09:49:40
// Design Name: 
// Module Name: cordic_beh
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module cordic_beh_fixedpoint();
/**
* Cordic algorithm
*/
parameter integer FXP_SCALE = 1024;
reg signed [11:0] t_angle = 0.8 * FXP_SCALE; //Input angle
reg signed [11:0] cos = 1.0 * FXP_SCALE; //Initial condition
reg signed [11:0] sin = 0.0;
reg signed [11:0] angle = 0.0; //Running angle
reg signed [11:0] arctan[0:10] = { 0.785398163 * FXP_SCALE, 0.463647609 * FXP_SCALE, 0.244978663 * FXP_SCALE, 0.124354995 * FXP_SCALE,
 0.06241881 * FXP_SCALE,
 0.031239833 * FXP_SCALE, 0.015623729 * FXP_SCALE, 0.007812341 * FXP_SCALE, 0.00390623 * FXP_SCALE, 0.001953123 * FXP_SCALE,
 0.000976562 * FXP_SCALE };
reg signed [11:0] Kn = 0.607253 * FXP_SCALE;
reg signed [23:0] sin1;
reg signed [23:0] cos1;
real sin2;
real cos2;
real angle2;

integer i, d;
reg signed [11:0] tmp;
initial //Execute only once
begin
    for ( i = 0; i < 11; i = i + 1) //Ten algorithm iterations
        begin
            if( t_angle > angle )
            begin
                angle = angle + arctan[i];
                tmp = cos - ( sin >>> i );
                sin = ( cos >>> i ) + sin;
                cos = tmp;
        end
        else
        begin
        angle = angle - arctan[i];
 tmp = cos + ( sin >>> i );
 sin = - ( cos >>> i) + sin;
 cos = tmp;
 end //if
 end //for
 //Scale sin/cos values
 sin1 = Kn * sin;
 cos1 = Kn * cos;
 
// angle2 = real(angle)/FXP_SCALE;
 //sin2 = real(sin1)/FXP_SCALE;
// cos2 = real(cos1)/FXP_SCALE;
 $display("sin=%f, cos=%f", sin1, cos1);
 //$display("sin=%f, cos=%f", sin2, cos2);
 //$display("sin=%f, cos=%f", angle2);
end
endmodule;
